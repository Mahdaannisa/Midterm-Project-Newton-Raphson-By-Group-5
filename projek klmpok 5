import streamlit as st
import numpy as np
import math
from typing import Callable, List, Tuple

# Optional: sympy for safe parsing and auto-derivative
try:
    import sympy as sp
    SYMPY_OK = True
except Exception:
    SYMPY_OK = False

st.set_page_config(page_title="Newton–Raphson Calculator", page_icon="🧮", layout="centered")

# --- Header ---
st.title("🧮 Newton–Raphson Calculator")
st.caption("Cari akar persamaan non-linier f(x)=0 dengan metode Newton–Raphson.")

with st.expander("ℹ️ Cara kerja singkat", expanded=False):
    st.markdown(
        r'''
Metode Newton–Raphson menggunakan iterasi:
\\[ x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)} \\]
Berhenti ketika perubahan nilai sudah sangat kecil (|x_{n+1} - x_n| < toleransi) atau jumlah iterasi mencapai maksimum.
        '''
    )

# --- Inputs ---
st.subheader("Masukan")
col1, col2 = st.columns(2)

with col1:
    fx_str = st.text_input("f(x)", value="x**3 - x - 2", help="Gunakan ekspresi Python (mis. x**3 - x - 2, sin(x) - x/2).")
    provide_deriv = st.toggle("Saya ingin mengisi f'(x) sendiri? (opsional)", value=False)
    dfx_str = st.text_input("f'(x) (opsional)", value="", help="Jika kosong dan Sympy tersedia, turunan otomatis akan dihitung.") if provide_deriv else ""

with col2:
    x0 = st.number_input("Tebakan awal x₀", value=1.5, format="%.10f")
    tol = st.number_input("Toleransi", value=1e-8, format="%.1e")
    max_iter = st.number_input("Maks iterasi", value=50, min_value=1, step=1)

# Domain functions: safe evaluation context
SAFE_FUNCS = {
    # numpy / math functions
    "sin": np.sin, "cos": np.cos, "tan": np.tan, "asin": np.arcsin, "acos": np.arccos, "atan": np.arctan,
    "sinh": np.sinh, "cosh": np.cosh, "tanh": np.tanh, "exp": np.exp, "log": np.log, "log10": np.log10,
    "sqrt": np.sqrt, "abs": np.abs, "pi": math.pi, "e": math.e,
    "floor": np.floor, "ceil": np.ceil, "pow": np.power,
}

def build_callable(expr: str, varname: str = "x") -> Callable[[float], float]:
    expr = expr.strip()
    if not expr:
        raise ValueError("Ekspresi kosong.")
    # If sympy available, parse robustly; else eval with restricted context
    if SYMPY_OK:
        x = sp.symbols(varname)
        sy = sp.sympify(expr, locals={"pi": sp.pi, "e": sp.E})
        f_lamb = sp.lambdify(x, sy, modules=["numpy"])
        return lambda val: float(f_lamb(val))
    else:
        def f(val):
            local = {varname: val}
            return float(eval(expr, {"__builtins__": {}}, {**SAFE_FUNCS, **local}))
        return f

def auto_derivative(expr: str, varname: str = "x") -> Tuple[str, Callable[[float], float]]:
    if not SYMPY_OK:
        raise RuntimeError("Sympy tidak tersedia, tidak bisa menghitung turunan otomatis.")
    x = sp.symbols(varname)
    sy = sp.sympify(expr, locals={"pi": sp.pi, "e": sp.E})
    dsy = sp.diff(sy, x)
    dfx_str_auto = str(dsy)
    d_lamb = sp.lambdify(x, dsy, modules=["numpy"])
    return dfx_str_auto, (lambda val: float(d_lamb(val)))

def newton_raphson(f: Callable[[float], float],
                   df: Callable[[float], float],
                   x0: float,
                   tol: float = 1e-8,
                   max_iter: int = 50) -> Tuple[float, List[dict]]:
    history = []
    x = float(x0)
    for k in range(1, max_iter + 1):
        fx = f(x)
        dfx = df(x)
        if dfx == 0:
            raise ZeroDivisionError(f"Turunan nol pada iterasi {k} di x={x}.")
        x_next = x - fx / dfx
        err = abs(x_next - x)
        history.append({
            "iterasi": k,
            "x_n": x,
            "f(x_n)": fx,
            "f'(x_n)": dfx,
            "x_{n+1}": x_next,
            "|Δx|": err
        })
        x = x_next
        if err < tol:
            break
    return x, history

# --- Build functions ---
err_box = st.empty()
f_callable = None
df_callable = None
df_display = None

try:
    f_callable = build_callable(fx_str, "x")
except Exception as e:
    err_box.error(f"❌ Gagal memproses f(x): {e}")

# Determine derivative
if provide_deriv and dfx_str.strip():
    try:
        df_callable = build_callable(dfx_str, "x")
        df_display = dfx_str
    except Exception as e:
        err_box.error(f"❌ Gagal memproses f'(x): {e}")
elif SYMPY_OK:
    try:
        df_display, df_callable = auto_derivative(fx_str, "x")
    except Exception as e:
        err_box.warning(f"⚠️ Tidak dapat menghitung turunan otomatis: {e}")
else:
    # Fallback: numerical derivative (central difference)
    def df_numeric(val, h=1e-6):
        return (f_callable(val + h) - f_callable(val - h)) / (2*h)
    df_callable = df_numeric
    df_display = "≈ turunan numerik (central difference)"

# --- Run ---
st.subheader("Hasil")
if f_callable is not None and df_callable is not None:
    run = st.button("🔁 Jalankan Newton–Raphson")
    if run:
        try:
            root, history = newton_raphson(f_callable, df_callable, x0, tol=tol, max_iter=int(max_iter))
            st.success(f"Perkiraan akar ≈ **{root:.12g}**")
            st.caption(f"Toleransi: {tol:.1e} | Maks iterasi: {int(max_iter)}")
            st.write(f"Turunan yang digunakan: `{df_display}`")
            # Show table
            import pandas as pd
            df_hist = pd.DataFrame(history)
            st.dataframe(df_hist, use_container_width=True)
            # Plot f(x) and iterations
            try:
                import matplotlib.pyplot as plt
                xs = np.linspace(root - 3, root + 3, 400)
                fs = np.array([f_callable(x) for x in xs])
                fig = plt.figure()
                plt.axhline(0, linewidth=1)
                plt.plot(xs, fs, linewidth=1.5, label="f(x)")
                pts_x = [row["x_n"] for row in history]
                pts_y = [f_callable(v) for v in pts_x]
                plt.scatter(pts_x, pts_y, s=30, label="Iterasi")
                plt.title("Grafik f(x) dan Titik Iterasi")
                plt.xlabel("x")
                plt.ylabel("f(x)")
                plt.legend()
                st.pyplot(fig)
            except Exception as pe:
                st.info(f"Plot tidak tersedia: {pe}")
        except Exception as e:
            st.error(f"Terjadi kesalahan saat iterasi: {e}")

st.markdown("---")
st.markdown("**Tips:** Pilih tebakan awal yang dekat dengan akar agar konvergensi lebih cepat. Hindari titik di mana f'(x)=0.")
st.caption("Dibuat dengan ❤️ menggunakan Streamlit + (opsional) Sympy.")
